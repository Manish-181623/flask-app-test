name: Deploy Particle Hunter Backend

on:
  push:
    branches:
      - master
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout master branch
      uses: actions/checkout@v4
      with:
        ref: master

    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/test_keys
        chmod 600 ~/.ssh/test_keys
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Get Commit Hash
      id: get_commit_hash
      run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Check if requirements or Dockerfile changed
      id: check_changes
      run: |
        if [ -z "${{ github.event.before }}" ]; then
          echo "No previous SHA found. Skipping change check."
          echo "files_changed=true" >> $GITHUB_OUTPUT  # Always deploy if it's the first commit
        else
          echo "Previous SHA found: ${{ github.event.before }}"
          echo "Current SHA: ${{ github.sha }}"

          # Check if requirements.txt or Dockerfile has changed between the two commits
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qE 'requirements.txt|Dockerfile'; then
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Deploy to Server
      env:
        # SSH_HOST: ${{ secrets.SERVER_HOST }}
        # SSH_USER: ${{ secrets.SERVER_USERNAME }}
        COMMIT_HASH: ${{ env.commit_hash }}
      run: |
        ssh -i ~/.ssh/test_keys -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << EOF
          cd /home/ntkyc/workspace/flask-app-test

          # Pull latest changes
          git checkout master
          git pull origin master
       
          if [ "${{ steps.check_changes.outputs.files_changed }}" == "true" ]; then
            # Build and tag the new image with the commit hash
            docker-compose build --build-arg COMMIT_HASH=$COMMIT_HASH app
            docker tag my-test-image my-test-image:$COMMIT_HASH

            # Remove the old image (excluding images used by running containers)
            containers_using_image=$(docker ps -q --filter "ancestor=my-test-image")
            if [ ! -z "$containers_using_image" ]; then
              echo "Stopping containers using the image: $containers_using_image"
              docker stop $containers_using_image
            fi

            OLD_IMAGES=$(docker images my-test-image --format "{{.ID}}" | grep -v $(docker images my-test-image --filter "label=com.docker.compose.project=my-test-image" --format "{{.ID}}"))
            if [ ! -z "$OLD_IMAGES" ]; then
              echo "Removing old images: $OLD_IMAGES"
              docker rmi -f $OLD_IMAGES
            else
              echo "No old images to remove."
            fi
          fi
          # Restart the services with the new image
          docker-compose down
          docker-compose up -d
        EOF
