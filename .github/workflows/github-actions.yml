# .github/workflows/deploy.yml
name: Deploy Particle Hunter Backend

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        # Dynamic ref based on the triggering branch
        ref: ${{ github.ref_name }}
    
    - name: Create SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SERVER_SSH_PRIVATE_KEY }}" > ~/.ssh/test_keys
        chmod 600 ~/.ssh/test_keys
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
    
    - name: Get Commit Hash
      id: get_commit_hash
      run: echo "commit_hash=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    
    - name: Check if requirements or Dockerfile changed
      id: check_changes
      run: |
        if [ -z "${{ github.event.before }}" ]; then
          echo "First deployment - no previous commit to compare"
          echo "files_changed=true" >> $GITHUB_OUTPUT
        else
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -qE 'requirements.txt|Dockerfile'; then
            echo "Requirements or Dockerfile changed - rebuilding image"
            echo "files_changed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in requirements.txt or Dockerfile - skipping rebuild"
            echo "files_changed=false" >> $GITHUB_OUTPUT
          fi
        fi
    
    - name: Deploy to Server
      env:
        COMMIT_HASH: ${{ env.commit_hash }}
        BRANCH_NAME: ${{ github.ref_name }}
      run: |
        log() {
          echo "[$(date +'%Y-%m-%d %H:%M:%S')] $1"
        }
        
        ssh -i ~/.ssh/test_keys -o StrictHostKeyChecking=no ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_HOST }} << EOF
          cd /home/ntkyc/workspace/flask-app-test
          
          # Switch to the appropriate branch and pull changes
          git fetch origin
          git checkout $BRANCH_NAME
          git pull origin $BRANCH_NAME
          
          # Use a common image name regardless of branch
          export COMPOSE_PROJECT_NAME=particle-hunter
          
          if [ "${{ steps.check_changes.outputs.files_changed }}" == "true" ]; then
            echo "Building new Docker image..."
            # Build image with common tag
            docker-compose build --build-arg COMMIT_HASH=$COMMIT_HASH app
            
            # Stop running containers
            echo "Stopping containers..."
            docker-compose down
            
            # Clean up old images, keeping the most recent one
            echo "Cleaning up old images..."
            docker images my-test-image --format "{{.ID}}" | tail -n +2 | while read -r id; do
              docker rmi -f \$id || true
            done
          else
            # If no rebuild needed, just restart the containers
            echo "Stopping containers..."
            docker-compose down
          fi
          
          # Start containers using the appropriate compose file
          echo "Starting new containers..."
          docker-compose up -d
        EOF